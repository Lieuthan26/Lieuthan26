import java.util.Random;
import java.util.Scanner;

public class GuessTheNumberGame {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Random random = new Random();
        int min = 1;
        int max = 100;
        int randomNumber = random.nextInt(max - min + 1) + min;
        int attempts = 0;
        boolean hasGuessed = false;

        System.out.println("Welcome to the Guess the Number game!");
        System.out.println("I've chosen a random number between 1 and 100. Try to guess it!");

        while (!hasGuessed) {
            System.out.print("Enter your guess: ");
            int userGuess = scanner.nextInt();
            attempts++;

            if (userGuess < randomNumber) {
                System.out.println("Higher!");
            } else if (userGuess > randomNumber) {
                System.out.println("Lower!");
            } else {
                System.out.println("Congratulations! You've guessed the number " + randomNumber + " in " + attempts + " attempts.");
                hasGuessed = true;
            }
        }

        scanner.close();
    }

// bai 2



import java.util.Scanner;

public class LoginSystem {
    public static void main(String[] args) {
        // Mảng chứa tên người dùng và mật khẩu tương ứng
        String[] usernames = {"user1", "user2", "user3"};
        String[] passwords = {"pass1", "pass2", "pass3"};

        // Nhập tên người dùng và mật khẩu từ người dùng
        Scanner scanner = new Scanner(System.in);
        System.out.print("Tên người dùng: ");
        String username = scanner.nextLine();
        System.out.print("Mật khẩu: ");
        String password = scanner.nextLine();

        // Kiểm tra xem tên người dùng và mật khẩu có tồn tại trong mảng không
        boolean isLoggedIn = false;
        for (int i = 0; i < usernames.length; i++) {
            if (username.equals(usernames[i]) && password.equals(passwords[i])) {
                isLoggedIn = true;
                break;
            }
        }

        // Hiển thị kết quả
        if (isLoggedIn) {
            System.out.println("Đăng nhập thành công!");
        } else {
            System.out.println("Tên người dùng hoặc mật khẩu không đúng. Vui lòng thử lại.");
        }
    }
}


//bai 3


import java.util.Scanner;

public class SimpleSystem {

    // A basic class to represent a user with username, password, and role
    static class User {
        String username;
        String password;
        String role;

        User(String username, String password, String role) {
            this.username = username;
            this.password = password;
            this.role = role;
        }
    }

    // Dummy users for demonstration (admin and user)
    static User[] users = {
        new User("admin", "admin123", "admin"),
        new User("user", "user123", "user")
    };

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // User login
        System.out.println("Welcome to the System!");
        System.out.print("Enter your username: ");
        String username = scanner.nextLine();
        System.out.print("Enter your password: ");
        String password = scanner.nextLine();

        User loggedInUser = authenticate(username, password);

        if (loggedInUser != null) {
            System.out.println("\nLogin successful! Welcome, " + loggedInUser.username);
            // Role-based menu access
            if ("admin".equalsIgnoreCase(loggedInUser.role)) {
                showAdminMenu(scanner);
            } else if ("user".equalsIgnoreCase(loggedInUser.role)) {
                showUserMenu(scanner);
            }
        } else {
            System.out.println("Invalid username or password.");
        }

        scanner.close();
    }

    // Method to authenticate the user
    public static User authenticate(String username, String password) {
        for (User user : users) {
            if (user.username.equals(username) && user.password.equals(password)) {
                return user; // Return the authenticated user
            }
        }
        return null; // Return null if authentication fails
    }

    // Admin menu with admin-specific operations
    public static void showAdminMenu(Scanner scanner) {
        int choice;
        do {
            System.out.println("\nAdmin Menu:");
            System.out.println("1. View System Information");
            System.out.println("2. Manage Users");
            System.out.println("3. Logout");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    viewSystemInfo();
                    break;
                case 2:
                    manageUsers();
                    break;
                case 3:
                    System.out.println("Logging out...");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        } while (choice != 3);
    }

    // User menu with basic user-specific operations
    public static void showUserMenu(Scanner scanner) {
        int choice;
        do {
            System.out.println("\nUser Menu:");
            System.out.println("1. View Profile");
            System.out.println("2. Logout");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    viewProfile();
                    break;
                case 2:
                    System.out.println("Logging out...");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        } while (choice != 2);
    }

    // Method for admin to view system information
    public static void viewSystemInfo() {
        System.out.println("\nSystem Information:");
        System.out.println("Operating System: " + System.getProperty("os.name"));
        System.out.println("Java Version: " + System.getProperty("java.version"));
    }

    // Method to simulate user management (dummy for this example)
    public static void manageUsers() {
        System.out.println("\nManaging Users...");
        System.out.println("User list:");
        for (User user : users) {
            System.out.println("Username: " + user.username + ", Role: " + user.role);
        }
    }

    // Method for the user to view profile (dummy for this example)
    public static void viewProfile() {
        System.out.println("\nProfile Information:");
        System.out.println("This is the user's profile.");
    }
}


}
//bai 4

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Scanner;

public class SecureLoginSystem {
    // Simulated database: Predefined username and hashed password
    private static final String predefinedUsername = "admin";
    private static final String predefinedPasswordHash = hashPassword("password123");

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Welcome to the Secure Login System");

        // Prompt the user for username and password
        System.out.print("Enter your username: ");
        String username = scanner.nextLine();

        System.out.print("Enter your password: ");
        String password = scanner.nextLine();

        // Hash the entered password for comparison
        String hashedPassword = hashPassword(password);

        // Validate credentials
        if (username.equals(predefinedUsername) && hashedPassword.equals(predefinedPasswordHash)) {
            System.out.println("Login successful! Welcome, " + username + "!");
        } else {
            System.out.println("Login failed! Incorrect username or password.");
        }

        scanner.close();
    }

    // Function to hash a password using SHA-256
    private static String hashPassword(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] hash = md.digest(password.getBytes());

            // Convert the byte array to a hex string
            StringBuilder hexString = new StringBuilder();
            for (byte b : hash) {
                String hex = Integer.toHexString(0xff & b);
                if (hex.length() == 1) hexString.append('0');
                hexString.append(hex);
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException("Error: Unable to hash password", e);
        }
    }
}




