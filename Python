// bai 1 

# Khai báo một mảng
my_array = [1, 2, 3, 4, 5]

# In các phần tử của mảng
print("Array elements:", my_array)

# Truy cập phần tử của mảng
print("Element at index 0:", my_array[0])
print("Element at index 2:", my_array[2])

# Thay đổi giá trị của phần tử
my_array[1] = 10
print("Updated array:", my_array)

# Duyệt qua các phần tử của mảng
print("Array elements:")
for item in my_array:
    print(item)

# Tính tổng các phần tử của mảng
sum_of_elements = sum(my_array)
print("Sum of elements:", sum_of_elements)

# Tìm giá trị lớn nhất và nhỏ nhất trong mảng
max_value = max(my_array)
min_value = min(my_array)
print("Max value:", max_value)
print("Min value:", min_value)


// bai 3
# Khai báo một danh sách (list) các số
numbers = [10, 5, 20, 15, 30]

# Tìm giá trị lớn nhất trong danh sách
max_value = max(numbers)

# In ra giá trị lớn nhất
print("Giá trị lớn nhất trong danh sách là:", max_value)
Giá trị lớn nhất trong danh sách là: 30


# Sử dụng hàm max() với nhiều đối số
max_value = max(10, 5, 20, 15, 30)

# In ra giá trị lớn nhất
print("Giá trị lớn nhất là:", max_value)


//bai4


# Function to calculate the sum of user inputted numbers
def calculate_sum():
    # Ask the user for the number of elements
    num_count = int(input("How many numbers do you want to input? "))

    # Initialize sum to 0
    total_sum = 0

    # Loop to get the numbers from the user and add them to the sum
    for i in range(num_count):
        number = float(input(f"Enter number {i+1}: "))
        total_sum += number

    # Print the total sum
    print(f"\nThe total sum of the entered numbers is: {total_sum}")

# Call the function to execute the code
calculate_sum()

//bai5

import bcrypt

# In-memory "database" for user credentials
user_database = {}

def register_user(username, password):
    """
    Register a new user with a hashed password.
    """
    if username in user_database:
        print("Error: Username already exists!")
        return False
    
    # Hash the password
    hashed_password = bcrypt.hashpw(password.encode(), bcrypt.gensalt())
    # Store the hashed password in the "database"
    user_database[username] = hashed_password
    print(f"User '{username}' registered successfully!")
    return True

def login_user(username, password):
    """
    Log in a user by verifying the password.
    """
    if username not in user_database:
        print("Error: Username not found!")
        return False
    
    # Retrieve the hashed password from the database
    stored_hashed_password = user_database[username]
    
    # Verify the entered password against the stored hashed password
    if bcrypt.checkpw(password.encode(), stored_hashed_password):
        print(f"Login successful! Welcome, {username}!")
        return True
    else:
        print("Error: Incorrect password!")
        return False

def main():
    while True:
        print("\n--- Login System ---")
        print("1. Register")
        print("2. Login")
        print("3. Exit")
        choice = input("Enter your choice: ")
        
        if choice == "1":
            # Register a new user
            username = input("Enter a username: ")
            password = input("Enter a password: ")
            register_user(username, password)
        elif choice == "2":
            # Log in an existing user
            username = input("Enter your username: ")
            password = input("Enter your password: ")
            login_user(username, password)
        elif choice == "3":
            # Exit the program
            print("Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()




//bai6






















